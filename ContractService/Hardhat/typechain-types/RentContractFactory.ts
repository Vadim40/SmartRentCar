/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface RentContractFactoryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "allContracts"
      | "contractsByCompany"
      | "contractsByRenter"
      | "createRentContract"
      | "getAllContracts"
      | "getContractsByCompany"
      | "getContractsByRenter"
      | "owner"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "ContractCreated"): EventFragment;

  encodeFunctionData(
    functionFragment: "allContracts",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "contractsByCompany",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "contractsByRenter",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createRentContract",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllContracts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getContractsByCompany",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getContractsByRenter",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "allContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contractsByCompany",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contractsByRenter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createRentContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContractsByCompany",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContractsByRenter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
}

export namespace ContractCreatedEvent {
  export type InputTuple = [
    contractAddress: AddressLike,
    renter: AddressLike,
    company: AddressLike
  ];
  export type OutputTuple = [
    contractAddress: string,
    renter: string,
    company: string
  ];
  export interface OutputObject {
    contractAddress: string;
    renter: string;
    company: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface RentContractFactory extends BaseContract {
  connect(runner?: ContractRunner | null): RentContractFactory;
  waitForDeployment(): Promise<this>;

  interface: RentContractFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  allContracts: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  contractsByCompany: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;

  contractsByRenter: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;

  createRentContract: TypedContractMethod<
    [
      _renter: AddressLike,
      _company: AddressLike,
      _deposit: BigNumberish,
      _rentAmount: BigNumberish,
      _startTime: BigNumberish,
      _endTime: BigNumberish,
      _unlockDelayHours: BigNumberish
    ],
    [string],
    "payable"
  >;

  getAllContracts: TypedContractMethod<[], [string[]], "view">;

  getContractsByCompany: TypedContractMethod<
    [company: AddressLike],
    [string[]],
    "view"
  >;

  getContractsByRenter: TypedContractMethod<
    [renter: AddressLike],
    [string[]],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "allContracts"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "contractsByCompany"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "contractsByRenter"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "createRentContract"
  ): TypedContractMethod<
    [
      _renter: AddressLike,
      _company: AddressLike,
      _deposit: BigNumberish,
      _rentAmount: BigNumberish,
      _startTime: BigNumberish,
      _endTime: BigNumberish,
      _unlockDelayHours: BigNumberish
    ],
    [string],
    "payable"
  >;
  getFunction(
    nameOrSignature: "getAllContracts"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getContractsByCompany"
  ): TypedContractMethod<[company: AddressLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "getContractsByRenter"
  ): TypedContractMethod<[renter: AddressLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "ContractCreated"
  ): TypedContractEvent<
    ContractCreatedEvent.InputTuple,
    ContractCreatedEvent.OutputTuple,
    ContractCreatedEvent.OutputObject
  >;

  filters: {
    "ContractCreated(address,address,address)": TypedContractEvent<
      ContractCreatedEvent.InputTuple,
      ContractCreatedEvent.OutputTuple,
      ContractCreatedEvent.OutputObject
    >;
    ContractCreated: TypedContractEvent<
      ContractCreatedEvent.InputTuple,
      ContractCreatedEvent.OutputTuple,
      ContractCreatedEvent.OutputObject
    >;
  };
}
